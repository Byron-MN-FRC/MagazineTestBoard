// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import frc.robot.Constants;
import frc.robot.subsystems.BallAcquisition;
import frc.robot.subsystems.BallIndexer;
import frc.robot.subsystems.BallShooter;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.DriveTrain;
import frc.robot.subsystems.Shifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutoSelector extends SequentialCommandGroup {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public AutoSelector(BallAcquisition m_ballAcquisition, BallIndexer m_ballIndexer, BallShooter m_ballShooter, DriveTrain  m_driveTrain, Shifter m_shifter){


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
     String startingPosition = SmartDashboard.getString(Constants.autoPosition, "L");
    addCommands(
   
   // System.out.println("Here")
    
    // if (startingPosition.toUpperCase().equals("L")){

        //     new zeroHood(m_ballShooter);
        //     new setShootModeOn(m_ballShooter);
        //     new driveFeet(6.5, m_driveTrain);
        //     new autoTurn(30, m_driveTrain);
        //     new turn2LimeLight(m_driveTrain);
        //     new teleopAutoShootCMD(m_ballShooter);
        //     new autoTurn(-30, m_driveTrain);
        //     new extendSolenoid(m_ballAcquisition);
        //     new startAcquireMotor(m_ballAcquisition);
        //     new driveFeet(9, m_driveTrain);
        // } else if (startingPosition.toUpperCase().equals("M")){
        //     new zeroHood(m_ballShooter);
        //     new turn2LimeLight(m_driveTrain);
        //     new teleopAutoShootCMD(m_ballShooter);
        //     //new autoTurn(100, m_driveTrain);
        //     new driveFeet(2, m_driveTrain);
        // }else {
        //     new setShootModeOn(m_ballShooter);
        //     new driveFeet(6.5, m_driveTrain);
        //     new autoTurn(-30, m_driveTrain);
        //     new turn2LimeLight(m_driveTrain);
        //     new teleopAutoShootCMD(m_ballShooter);
        //     new autoTurn(30, m_driveTrain);
        // }  
        // // Add Commands here:
        // // Also add parallel commands using the
        // //
        // // addCommands(
        // //      new command1(argsN, subsystem),
        // //      parallel(
        // //          new command2(argsN, subsystem),
        // //          new command3(argsN, subsystem)
        // //      )    
        // //  );
        //new setShootModeOn(m_ballShooter)
    );
    }
    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
