// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.ScheduleCommand;
import frc.robot.BallShooterConstants;
import frc.robot.LimelightUtility;
import frc.robot.Robot;
import frc.robot.RobotContainer;
import frc.robot.subsystems.BallIndexer;

/**
 *
 */
public class teleopAutoShootCMD extends CommandBase {
    private final BallIndexer m_ballShooter;

    double hoodEncoderUnits = 0;
    double area = 0;
    double rpms = 0;
    Integer numberOfBalls = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public teleopAutoShootCMD(BallIndexer subsystem) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        m_ballShooter = subsystem;
        addRequirements(m_ballShooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }





    runIndexBelt indexBeltRunner;
    // Called just before this Command runs the first time
    @Override
    public void initialize() {
        LimelightUtility.RefreshTrackingData();
        // Lookup optimal RPMS &  Hood encoder units based on area (if target seen)
        if (LimelightUtility.ValidTargetFound()) {
            area = LimelightUtility.TargetAreaPercentage * 100; 
        } else {
            System.out.println("No target");
            area = 70;
        }  
        rpms = BallShooterConstants.targetPercent2ShooterParms.floorEntry((int)area).getValue()[0];
        hoodEncoderUnits = BallShooterConstants.targetPercent2ShooterParms.floorEntry((int)area).getValue()[1];

        //numberOfBalls = RobotContainer.getInstance().m_ballIndexer.ballCount(); 
        //Robot.ballShooter.prepareToShoot(rpms,hoodEncoderUnits);
        //setTimeout(BallShooterConstants.teleopAutoShootCmdTimeout);
        indexBeltRunner = new runIndexBelt(RobotContainer.getInstance().m_ballIndexer);
        RobotContainer.getInstance().m_ballIndexer.shooterActive = true;
    }



    // Called repeatedly when this Command is scheduled to run
    @Override
    public void execute() {
        if (RobotContainer.getInstance().m_ballShooter.ready2Shoot(rpms, hoodEncoderUnits)) {
            if (indexBeltRunner.isFinished()) {
                System.out.println("teleopAutoShootCMD is Running belt motor");
                indexBeltRunner.execute();
                
            } /*else if(!RobotContainer.getInstance().m_ballIndexer.ballPresent(1)) {
                RobotContainer.getInstance().m_ballAcquisition.startAquireMotor();
            }*/
        } else {
            if (!indexBeltRunner.isFinished()) {
                System.out.println("teleopAutoShootCMD is Cancelling belt motor");
                
                indexBeltRunner.cancel();   
            }
       }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    public boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    public void end(boolean interrupted) {
        //Robot.ballShooter.stopShooter();
        if (!indexBeltRunner.isFinished()) {
            indexBeltRunner.cancel();
        }
        RobotContainer.getInstance().m_ballAcquisition.stopAquireMotor();
        RobotContainer.getInstance().m_ballIndexer.shooterActive =false;
    }

}
