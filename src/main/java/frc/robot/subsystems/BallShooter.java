// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.ctre.phoenix.motorcontrol.SupplyCurrentLimitConfiguration;
import frc.robot.BallShooterConstants;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
/**
 *
 */
public class BallShooter extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX shootMotor;
private WPI_TalonSRX hoodMotor;
private DigitalInput limitSwitchDown;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

     public final SupplyCurrentLimitConfiguration currentLimiting = new SupplyCurrentLimitConfiguration(
            BallShooterConstants.kEnableCurrentLimiting_BS, BallShooterConstants.currentLimit,
            BallShooterConstants.thresholdLimit, BallShooterConstants.thresholdTime);

    private double masterShootRPM = 0;
    private double masterHoodPos = 0;
    private double shootIdleVelocity = 0;

    public boolean inAuton = false;

    public BallShooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
shootMotor = new WPI_TalonFX(13);
 
 

hoodMotor = new WPI_TalonSRX(8);
 
 

limitSwitchDown = new DigitalInput(0);
 addChild("limitSwitchDown",limitSwitchDown);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    shootMotorConfig();
    hoodMotorConfig();
    if (BallShooterConstants.test) {
        SmartDashboard.putNumber("test/shooter/targetVelocity", 500);
        SmartDashboard.putNumber("test/shooter/P", .4);
        SmartDashboard.putNumber("test/shooter/I", .00001);
        SmartDashboard.putNumber("test/shooter/D", 0);
        SmartDashboard.putNumber("test/shooter/F", .0495);
        SmartDashboard.putNumber("test/shooter/targetPosition", 3000);
    }
}

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void startShootMotor() {
        shootMotor.set(.3);
    }
    public void stopShootMotor() {
        shootMotor.stopMotor();;
    }
}

